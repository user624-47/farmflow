// This file extends the base Supabase types with our custom tables
// The types are automatically generated by the Supabase CLI
// and should be updated when the database schema changes

import { Database as BaseDatabase } from '@/integrations/supabase/types';

// Define the risk factor type
type RiskFactor = {
  factor: string;
  risk: 'low' | 'medium' | 'high' | 'critical';
  details: string;
  impact?: string;
  mitigation?: string[];
  confidence?: number;
};

// Create a type that matches the structure of the base database
type DatabaseExtension = {
  public: {
    Tables: {
      crops: {
        Row: {
          id: string;
          name: string;
          description?: string | null;
          created_at: string;
          updated_at?: string | null;
        };
        Insert: {
          id?: string;
          name: string;
          description?: string | null;
          created_at?: string;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          name?: string;
          description?: string | null;
          created_at?: string;
          updated_at?: string | null;
        };
      };
      
      crop_growth_stages: {
        Row: {
          id: string;
          crop_id: string;
          stage_name: string;
          stage_order: number;
          duration_days: number;
          description?: string | null;
          optimal_temp_min?: number | null;
          optimal_temp_max?: number | null;
          optimal_humidity_min?: number | null;
          optimal_humidity_max?: number | null;
          optimal_soil_moisture_min?: number | null;
          optimal_soil_moisture_max?: number | null;
          water_needs?: string | null;
          nutrient_needs?: string | null;
          common_issues?: string[] | null;
          key_actions?: string[] | null;
          growth_indicators?: string[] | null;
          created_at: string;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          crop_id: string;
          stage_name: string;
          stage_order: number;
          duration_days: number;
          description?: string | null;
          optimal_temp_min?: number | null;
          optimal_temp_max?: number | null;
          optimal_humidity_min?: number | null;
          optimal_humidity_max?: number | null;
          optimal_soil_moisture_min?: number | null;
          optimal_soil_moisture_max?: number | null;
          water_needs?: string | null;
          nutrient_needs?: string | null;
          common_issues?: string[] | null;
          key_actions?: string[] | null;
          growth_indicators?: string[] | null;
          created_at?: string;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          crop_id?: string;
          stage_name?: string;
          stage_order?: number;
          duration_days?: number;
          description?: string | null;
          optimal_temp_min?: number | null;
          optimal_temp_max?: number | null;
          optimal_humidity_min?: number | null;
          optimal_humidity_max?: number | null;
          optimal_soil_moisture_min?: number | null;
          optimal_soil_moisture_max?: number | null;
          water_needs?: string | null;
          nutrient_needs?: string | null;
          common_issues?: string[] | null;
          key_actions?: string[] | null;
          growth_indicators?: string[] | null;
          created_at?: string;
          updated_at?: string | null;
        };
      };

      crop_yield_history: {
        Row: {
          id: string;
          crop_id: string;
          location: string;
          yield_amount: number;
          yield_unit: string;
          harvest_date: string;
          conditions: Record<string, unknown>;
          notes?: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          crop_id: string;
          location: string;
          yield_amount: number;
          yield_unit?: string;
          harvest_date: string;
          conditions?: Record<string, unknown>;
          notes?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          crop_id?: string;
          location?: string;
          yield_amount?: number;
          yield_unit?: string;
          harvest_date?: string;
          conditions?: Record<string, unknown>;
          notes?: string | null;
          created_at?: string;
          updated_at?: string;
        };
      };

      crop_insights: {
        Row: {
          id: string;
          crop_id: string;
          location: string;
          last_updated: string;
          health_score?: number | null;
          current_stage?: string | null;
          stage_progress?: number | null;
          recommendations?: string[] | null;
          risk_factors?: RiskFactor[] | null;
          growth_projection?: string | null;
          comparison_to_average?: string | null;
          created_at: string;
          updated_at: string;
        };
        Insert: {
          id?: string;
          crop_id: string;
          location: string;
          last_updated: string;
          health_score?: number | null;
          current_stage?: string | null;
          stage_progress?: number | null;
          recommendations?: string[] | null;
          risk_factors?: RiskFactor[] | null;
          growth_projection?: string | null;
          comparison_to_average?: string | null;
          created_at?: string;
          updated_at?: string;
        };
        Update: {
          id?: string;
          crop_id?: string;
          location?: string;
          last_updated?: string;
          health_score?: number | null;
          current_stage?: string | null;
          stage_progress?: number | null;
          recommendations?: string[] | null;
          risk_factors?: RiskFactor[] | null;
          growth_projection?: string | null;
          comparison_to_average?: string | null;
          created_at?: string;
          updated_at?: string;
        };
      };
    };
  };
};

// Extend the base database type with our custom tables
export type Database = BaseDatabase & DatabaseExtension;

// Helper types for table operations
export type Tables = Database['public']['Tables'];
export type TableName = keyof Tables;

type TableRow<T extends TableName> = Tables[T]['Row'];
type TableInsert<T extends TableName> = Tables[T]['Insert'];
type TableUpdate<T extends TableName> = Tables[T]['Update'];

// Export the types for use in the application
export type { TableRow, TableInsert, TableUpdate };

// Export enums if you have any
export type Enums = Database['public']['Enums'];
