import React, { useState, useEffect, useCallback } from "react";
import { useNavigate, useParams, Link, useLocation, useSearchParams } from "react-router-dom";
import { useAuth } from "@/contexts/AuthContext";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";
import { LivestockDashboard } from "@/features/livestock/components/LivestockDashboard";

// UI Components
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogDescription 
} from "@/components/ui/dialog";
import { 
  Card, 
  CardContent, 
  CardHeader, 
  CardTitle 
} from "@/components/ui/card";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { PlusCircle, Search } from "lucide-react";

// Types
type Livestock = {
  id: string;
  tag_number?: string;
  name?: string;
  species?: string;
  breed?: string;
  gender?: 'male' | 'female' | 'other';
  status?: string;
  health_status?: string;
  livestock_type?: string;
  farmer_id?: string;
  organization_id?: string;
  farmers?: {
    first_name?: string;
    last_name?: string;
  };
};

type LivestockProps = {
  showDetails?: boolean;
  showForm?: boolean;
  id?: string;
  onFormClose: () => void;
};

// Main Livestock component
export function LivestockPage({ 
  showDetails = false, 
  showForm = false, 
  id,
  onFormClose 
}: LivestockProps) {
  const { user, organizationId } = useAuth();
  const [livestock, setLivestock] = useState<Livestock[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage] = useState(10);
  const [selectedLivestock, setSelectedLivestock] = useState<Livestock | null>(null);
  const [editingLivestock, setEditingLivestock] = useState<Livestock | null>(null);
  const [view, setView] = useState<'dashboard' | 'list'>('dashboard');
  const [searchParams, setSearchParams] = useSearchParams();
  const [isDeleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [livestockToDelete, setLivestockToDelete] = useState<Livestock | null>(null);
  const [isFormOpen, setIsFormOpen] = useState(false);

  // Fetch livestock data
  const fetchLivestock = useCallback(async () => {
    if (!organizationId) return;
    
    try {
      setLoading(true);
      let query = supabase
        .from('livestock')
        .select('*')
        .eq('organization_id', organizationId);
      
      const { data, error } = await query;
      
      if (error) throw error;
      
      if (data) {
        setLivestock(data);
      }
    } catch (error) {
      console.error('Error fetching livestock:', error);
      toast({
        title: "Error",
        description: "Failed to load livestock records",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [organizationId]);

  // Toggle between dashboard and list view
  const toggleView = (newView: 'dashboard' | 'list') => {
    setView(newView);
    setSearchParams({ view: newView });
  };
  
  // Handle livestock deletion
  const handleDelete = async (livestock: Livestock) => {
    try {
      if (!user) {
        throw new Error('You must be logged in to delete livestock records');
      }
      
      if (!organizationId) {
        throw new Error('Your account is not associated with an organization. Please contact your administrator.');
      }
      
      const { error } = await supabase
        .from('livestock')
        .delete()
        .eq('id', livestock.id)
        .eq('organization_id', organizationId);
      
      if (error) throw error;
      
      toast({
        title: "Success",
        description: "Livestock record deleted successfully",
      });
      
      setDeleteDialogOpen(false);
      fetchLivestock();
    } catch (error) {
      console.error('Error deleting livestock:', error);
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : 'Failed to delete livestock record',
        variant: "destructive",
      });
    }
  };

  // Handle add new livestock
  const handleAddNew = () => {
    setEditingLivestock(null);
    setIsFormOpen(true);
  };

  // Set initial view from URL
  useEffect(() => {
    const viewParam = searchParams.get('view');
    if (viewParam === 'list' || viewParam === 'dashboard') {
      setView(viewParam);
    } else {
      setSearchParams({ view: 'dashboard' }, { replace: true });
    }
  }, [searchParams, setSearchParams]);

  // Initial data fetch
  useEffect(() => {
    fetchLivestock();
  }, [fetchLivestock]);

  // Get status badge variant
  const getStatusVariant = (status?: string) => {
    switch (status?.toLowerCase()) {
      case 'active':
        return 'default';
      case 'inactive':
        return 'secondary';
      case 'sick':
        return 'destructive';
      case 'pregnant':
        return 'default';
      case 'sold':
        return 'outline';
      case 'deceased':
        return 'destructive';
      default:
        return 'outline';
    }
  };

  // Get gender display text
  const getGenderDisplay = (gender?: string) => {
    switch (gender?.toLowerCase()) {
      case 'male':
        return 'Male';
      case 'female':
        return 'Female';
      case 'other':
        return 'Other';
      default:
        return 'Unknown';
    }
  };

  // Filter livestock based on search term
  const filteredLivestock = livestock.filter(item => {
    const matchesSearch = 
      item.tag_number?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.species?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      item.breed?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = filterStatus === 'all' || item.status?.toLowerCase() === filterStatus.toLowerCase();
    
    return matchesSearch && matchesStatus;
  });

  // Pagination
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredLivestock.slice(indexOfFirstItem, indexOfLastItem);
  const totalPages = Math.ceil(filteredLivestock.length / itemsPerPage);

  const handlePageChange = (page: number) => {
    setCurrentPage(page);
  };

  // Render the component
  return (
    <div className="space-y-6">
      {/* Dashboard/List Toggle */}
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Livestock Management</h1>
        <div className="flex space-x-2">
          <Button 
            variant={view === 'dashboard' ? 'default' : 'outline'} 
            onClick={() => toggleView('dashboard')}
          >
            Dashboard
          </Button>
          <Button 
            variant={view === 'list' ? 'default' : 'outline'}
            onClick={() => toggleView('list')}
          >
            List View
          </Button>
          <Button onClick={handleAddNew} className="ml-2">
            <PlusCircle className="mr-2 h-4 w-4" />
            Add New
          </Button>
        </div>
      </div>
      
      {view === 'dashboard' ? (
        <LivestockDashboard />
      ) : (
        <div className="space-y-4">
          {/* Search and Filter */}
          <Card>
            <CardHeader>
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div className="relative w-full md:w-1/2">
                  <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
                  <Input
                    type="search"
                    placeholder="Search by tag, name, species, or breed..."
                    className="w-full pl-8"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                  />
                </div>
                <div className="w-full md:w-1/3">
                  <select
                    className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                    value={filterStatus}
                    onChange={(e) => setFilterStatus(e.target.value)}
                  >
                    <option value="all">All Statuses</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="sick">Sick</option>
                    <option value="pregnant">Pregnant</option>
                    <option value="sold">Sold</option>
                    <option value="deceased">Deceased</option>
                  </select>
                </div>
              </div>
            </CardHeader>
          </Card>

          {/* Livestock Table */}
          <Card>
            <CardContent className="p-0">
              {loading ? (
                <div className="flex items-center justify-center h-64">
                  <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
                </div>
              ) : filteredLivestock.length === 0 ? (
                <div className="flex flex-col items-center justify-center p-8 text-center">
                  <p className="text-muted-foreground">No livestock records found</p>
                  <Button onClick={handleAddNew} className="mt-4">
                    <PlusCircle className="mr-2 h-4 w-4" />
                    Add New Livestock
                  </Button>
                </div>
              ) : (
                <>
                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Tag #</TableHead>
                          <TableHead>Name</TableHead>
                          <TableHead>Species</TableHead>
                          <TableHead>Breed</TableHead>
                          <TableHead>Gender</TableHead>
                          <TableHead>Status</TableHead>
                          <TableHead>Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {currentItems.map((item) => (
                          <TableRow key={item.id}>
                            <TableCell className="font-medium">{item.tag_number || '-'}</TableCell>
                            <TableCell>{item.name || '-'}</TableCell>
                            <TableCell>{item.species || '-'}</TableCell>
                            <TableCell>{item.breed || '-'}</TableCell>
                            <TableCell>{getGenderDisplay(item.gender)}</TableCell>
                            <TableCell>
                              <Badge variant={getStatusVariant(item.status)}>
                                {item.status ? item.status.charAt(0).toUpperCase() + item.status.slice(1) : 'Unknown'}
                              </Badge>
                            </TableCell>
                            <TableCell>
                              <div className="flex space-x-2">
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  onClick={() => setEditingLivestock(item)}
                                >
                                  Edit
                                </Button>
                                <Button 
                                  variant="ghost" 
                                  size="sm"
                                  className="text-destructive hover:text-destructive"
                                  onClick={() => {
                                    setLivestockToDelete(item);
                                    setDeleteDialogOpen(true);
                                  }}
                                >
                                  Delete
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                  
                  {/* Pagination */}
                  {totalPages > 1 && (
                    <div className="flex items-center justify-between px-6 py-4 border-t">
                      <div className="text-sm text-muted-foreground">
                        Showing <span className="font-medium">{indexOfFirstItem + 1}</span> to{' '}
                        <span className="font-medium">
                          {Math.min(indexOfLastItem, filteredLivestock.length)}
                        </span>{' '}
                        of <span className="font-medium">{filteredLivestock.length}</span> records
                      </div>
                      <div className="flex space-x-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handlePageChange(currentPage - 1)}
                          disabled={currentPage === 1}
                        >
                          Previous
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handlePageChange(currentPage + 1)}
                          disabled={currentPage === totalPages}
                        >
                          Next
                        </Button>
                      </div>
                    </div>
                  )}
                </>
              )}
            </CardContent>
          </Card>
        </div>
      )}

      {/* Add/Edit Livestock Dialog */}
      <Dialog 
        open={isFormOpen || showForm} 
        onOpenChange={(open) => {
          if (!open) onFormClose();
          setIsFormOpen(open);
        }}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {editingLivestock ? 'Edit Livestock' : 'Add New Livestock'}
            </DialogTitle>
          </DialogHeader>
          <div className="py-4">
            {/* Livestock form would go here */}
            <p className="text-muted-foreground">Livestock form will be implemented here.</p>
          </div>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Delete Livestock Record</DialogTitle>
            <DialogDescription>
              Are you sure you want to delete this livestock record? This action cannot be undone.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end space-x-2 mt-4">
            <Button variant="outline" onClick={() => setDeleteDialogOpen(false)}>
              Cancel
            </Button>
            <Button
              variant="destructive"
              onClick={() => {
                if (livestockToDelete) {
                  handleDelete(livestockToDelete);
                }
              }}
            >
              Delete
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}

// Wrapper component for routing
export function LivestockWithRouter() {
  const [searchParams] = useSearchParams();
  const { id } = useParams();
  const location = useLocation();
  
  // Determine if we're showing details or form based on URL
  const showDetails = location.pathname.includes('/livestock/') && id && !location.pathname.endsWith('/edit');
  const showForm = location.pathname.endsWith('/new') || location.pathname.endsWith('/edit');
  
  const handleFormClose = () => {
    // Navigate back to the list view
    window.history.back();
  };

  return (
    <LivestockPage 
      showDetails={showDetails}
      showForm={showForm}
      id={id}
      onFormClose={handleFormClose}
    />
  );
}

export default LivestockWithRouter;
